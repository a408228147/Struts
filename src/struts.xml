<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
        "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>
 <!--
 struts.devMode 常量值 false  开发模式，修改配置文件，不需要重启，输出更多的
 错误信息，开发阶段建议为true。

 -->
 <!--开启动态方法调用-->
 <constant name="struts.enable.DynamicMethodInvocation" value="true"></constant>
 <!-- 修改Struts中的defalut.properties定义的常量值 -->
<constant name="struts.devMode" value="true"></constant>
<!--  修改 Struts 中默认的后缀名 struts.action.extension
 创建文件 struts.properties struts.action.extension=abc 也能修改后缀名  -->
 <constant name="struts.action.extension" value="do"></constant>
<!--package 是定义一个Struts的包，它是把配置文件按照面向对象的思想来管理 分模块开发
name：定义包名称 配置文件中唯一
extends：指定当前包的父包，它是按照面向对象思想管理的体现
namespace属性：名称空间 ，当指定了名称空间之后访问路径就变成了
    访问路径 = 名称空间+动态名称
    namespace="/user"
    不指定该属性时，该属性有默认值，默认值是 ""
搜索顺序
1。先去找对应的空间名称
找到就执行第二步，没有就继续从右到左直到根名称，只有找到就执行
2.找动作名称
在空间名称下搜索 找到就执行
 没找到就去默认的名称空间下，找动作名称。只找动作名称
-->

 <!-- action元素:是用于定义动作名称，动作类和动作方法的映射。以及当出现
     不同情况时前往指定的结果视图
     name属性：动作的名称，和jsp页面上的请求url中对应起来
       在此处不能写 .action
       class 属性:指定动作类的位置
       method属性：指定要执行的动作类方法的名称

   name和method 属性的名字最好一样 便于理解
     -->
<!-- <package name="p1" extends="struts-default" >
  <action name="hello" class="com.itheima.web.action.HelloAction" method="sayHello">
   <result name="success">/success.jsp</result>
  </action>-->


  <!--第三种创建动作类方式的配置-->
 <!-- <action name="actionSupport" class="com.itheima.web.action.demo3Acton">
   <result name="success">/success.jsp</result>
  </action>-->
  <!--默认的动作类动作方法
  动作类ActionSupport的类 在Struts-default中定义
可以修改默认动作类
  -->
 <!-- <action name="defaultAction" >
   <result name="success">/success.jsp</result>
  </action>-->

  <!-- 动作方法调用的配置-->
  <!--<action name="addUser" class="com.itheima.web.action.UserAction" method="addUser">
   <result name="success">/AddUser.jsp</result>
  </action>
  <action name="deleteUser" class="com.itheima.web.action.UserAction" method="deleteUser">
  <result name="success">/deleteUser.jsp</result>
  </action>-->

  <!--使用通配符 配置动作方法
  * 表示的是动作的名称,当有和动作名称想匹配的时候可与用{出现的位置}来代替
  -->
  <!--<action name="*" class="com.itheima.web.action.UserAction" method="{1}">
   <result name="success">/{1}.jsp</result>
  </action>

  <action name="*_*" class="com.itheima.web.action.{2}Action" method="{1}{2}">
   <result name="success">/{1}{2}.jsp</result>
  </action>
-->
<!--
defalut.properties配置文件中， struts.enable.DynamicMethodlnvocation
是否允许动态调用 常量值 false
-->


  <!--动态方法调用的配置-->
  <!--<action name="user" class="com.itheima.web.action.UserAction">
   <result name="success" type="redirect" >/success.jsp</result>
  </action>-->

  <!--result 元素 配置逻辑结果视图
      name属性 结果视图名称 与动作方法的返回值对应 当一致前往指定的jsp
      type属性 结果视图类型  有默认值 dispatcher转发
       常用取值
       dispathcer：请求转发 默认值 地址不变化 请求域中的数据 转发不丢失
       redirect： 重定向  地址变化     请求域中的数据 会丢失

       chain ：转发到另一个动作
        转发到同包（同名称空间）下的另一个动作
 <result name="success" type="chain"> action2</result>
        转发到不同包（不同名称空间）下的另一个动作
        <result name="success" type="chain">
  <param name="namespace">/n2</param>
  <param name="actionName">/action3</param>
 </result>

        redirectAction:重定向到另一个动作
         重定向到同包（同名称空间）下的另一个动作
<result name="success" type="redirecaAction"> action2</result>
         重定向不同包（不同名称空间）下的另一个动作
          <result name="success" type="redirectAction">
          使用的是注入的思想 在执行重定向之前，会先获取这两个参数的值
          调用的也就是setNamespace（"/n2"）和setActionName("action3")
  <param name="namespace">/n2</param>
  <param name="actionName">/action3</param>
 </result>

 似乎在idea中  <result name="success" type="redirectAction">/n2/action3</result>
 也能找到
   -->
<!--<action name="action1" class="com.itheima.web.action.demo3Acton">-->
 <!--<result name="success" type="chain">-->
  <!--<param name="namespace">/n2</param>-->
  <!--<param name="actionName">/action3</param>-->
 <!--</result>-->
 <!--<result name="success" type="chain">/n2/action3</result>-->
<!--</action>

  <action name="action2" >&lt;!&ndash;没有给定动作类， 默认的是ActionSupport  没有给定动作方法默认的是execute&ndash;&gt;
   <result name="success" >/success.jsp</result>
  </action>
 </package>-->

<!-- <package name="p0" extends="struts-default" >
 <action name="action2" class="com.itheima.web.action.demo3Acton">
 &lt;!&ndash; <result name="success" type="redirectAction" >/n2/action2</result>&ndash;&gt;
  <result name="success" type="chain">
   <param name="namespace">/n2</param>
   <param name="actionName">/action3</param>
  </result>
 </action>
 </package>-->

 <package name="p2" extends="struts-default" namespace="/n2">
  <action name="action2" ><!--没有给定动作类， 默认的是ActionSupport  没有给定动作方法默认的是execute-->
   <result name="success" >
    <param name="location">/success.jsp</param>
   </result>
  </action>
 </package>

 <!-- 全局结果视图-->
<package name="myDefault" extends="struts-default" abstract="true">
 <result-types>
  <result-type name="captcha" class="com.itheima.web.result.CAPTCHAResult"></result-type>
 </result-types>
 <global-results>
  <!-- 结果视图的查找顺序，先找当前动作类自己的 如果没有的 再去全局的-->
  <result name="success" type="captcha">
   <!--配置图片大小-->
   <param name="height" >20</param>
   <param name="width">150</param>
  </result>
 </global-results>
</package>
<!--自定义结果类型配置-->
 <package name="p3" extends="myDefault">
  <!--自定义结果类型-->
  <!--在包中配置的结果视图，是只能当前包和子包中使用-->
<!--  <result-types>
   <result-type name="captcha" class="com.itheima.web.result.CAPTCHAResult"></result-type>
  </result-types>-->
<action name="captchaAction" class="com.itheima.web.action.CaptchaAction">
 <!-- 写在action内部的结果视图，是只能在当前动作类使用的-->
 <!--<result name="success" type="captcha">
  &lt;!&ndash;配置图片大小&ndash;&gt;
<param name="height" >20</param>
  <param name="width">150</param>
 </result>-->
</action>
 </package>

 <package name="p4" extends="struts-default">
  <!--用户管理-->
  <!--角色管理-->
  <!--模块管理-->
 </package>


 <!--当我们不写任何拦截器时，默认的拦截器defaultStack它来为我门工作
 但是只要写了一个拦截器，默认的全部不起作用
 -->
 <package name="p5" extends="struts-default">
  <action name="action3" class="com.itheima.web.action.adduser" method="addUser">
   <!--使用注入的方式 ，给动作类的中的参数赋值-->
   <param name="username">张三</param>
  </action>
 </package>
</struts>